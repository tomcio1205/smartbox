Timer unit: 1e-06 s

Total time: 35.5355 s
File: handling_post.py
Function: handling_samrtbox_data at line 66

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    66                                           	@profile
    67                                           	def handling_samrtbox_data(self, request, data):
    68                                           
    69     50520       282943      5.6      0.8  		list_of_bytes = [ord(my_byte) for my_byte in data]
    70      2105       125307     59.5      0.4  		print "%r" % data
    71      2105        28827     13.7      0.1  		f_key = list_of_bytes[2]
    72      2105        28671     13.6      0.1  		list_of_bytes_send = []
    73                                           		# get id of currently communicating smartbox
    74      2105        70078     33.3      0.2  		my_smart_id_hex = ''.join('{:02x}'.format(x) for x in list_of_bytes[:2])
    75      2105        29034     13.8      0.1  		my_smart_id = int(my_smart_id_hex, 16)
    76                                           		# print f_key
    77                                           		# TODO this will work only if one bit will be set in f_key byte
    78                                           		# first we must check sum control
    79                                           		# sum_of_bytes_to_calc_sum_control = sum(list_of_bytes[:-2])
    80                                           		#
    81      2105       293084    139.2      0.8  		checksum = CRCCCITT().calculate(data[:-2])
    82      2105        34806     16.5      0.1  		receive_sum_control_hex = ''.join('{:02x}'.format(x) for x in list_of_bytes[-2:])
    83      2105        13805      6.6      0.0  		receive_sum_control = int(receive_sum_control_hex, 16)
    84      2105     21791708  10352.4     61.3  		db_operation = DatabaseCommunication()
    85      2105        19821      9.4      0.1  		if checksum == receive_sum_control:
    86      2105        63932     30.4      0.2  			print "Suma kontrolna zweryfikowana poprawnie"
    87                                           		else:
    88                                           			print "Sumy kontrolne różne, nie rozpatruję paczki \n"
    89                                           			return 0
    90      2105        39313     18.7      0.1  		list_of_all_smartboxes_id = []
    91      2105        29456     14.0      0.1  		smart_pins = {}
    92                                           
    93                                           		# this will be done if smartbox work in normal mode
    94      2105        11946      5.7      0.0  		if f_key == f_key_output_state:
    95                                           			# count smartboxes which are included in package (-2 because last two bytes are bytes of sum controll)
    96      2105        18270      8.7      0.1  			count_smartboxes = (len(list_of_bytes) - 2) / 7
    97      2105        26487     12.6      0.1  			print "Stan wyjścia obecny"
    98      8420        73713      8.8      0.2  			for smartbox in xrange(int(count_smartboxes)):
    99                                           				# convert bytes to hex, first of two bytes are id of smartbox, so first we need to convert
   100                                           				# its to hex and next this two bytes convert to one decimal value
   101      6315       140442     22.2      0.4  				smart_id_hex = ''.join(chr(bt) for bt in list_of_bytes[smartbox * 7:smartbox * 7 + 2])
   102                                           				# convert id to decimal
   103      6315       116289     18.4      0.3  				smart_id = int(smart_id_hex.encode('hex'), 16)
   104                                           				# append all ids to list
   105      6315        38153      6.0      0.1  				list_of_all_smartboxes_id.append(smart_id)
   106                                           				# 5 and 6 bytes represent power consumption of electric socket which master smartbox is connected to
   107      6315        87558     13.9      0.2  				power_consumption_hex = ''.join(chr(bt) for bt in list_of_bytes[smartbox * 7 + 4:smartbox * 7 + 6])
   108                                           				# convert power consumption to decimal
   109      6315        73681     11.7      0.2  				power_consumption = int(power_consumption_hex.encode('hex'), 16)
   110                                           				# 7 bytes represent voltage of electric socket which master smartbox is connected to
   111      6315        38338      6.1      0.1  				current_voltage = list_of_bytes[smartbox * 7 + 6]
   112                                           				# +3 because pin is fourth in package (we count from 0 so is +3)
   113      6315        76285     12.1      0.2  				smart_pins[smart_id] = int(chr(list_of_bytes[smartbox * 7 + 3]).encode('hex'), 16)
   114      6315       134266     21.3      0.4  				print "My smart id: %d" % smart_id
   115      6315       152301     24.1      0.4  				print "Power consumption: %d mA/s" % power_consumption
   116      6315        96192     15.2      0.3  				print "Voltage of electrical socket: %d V" % current_voltage
   117                                           				# insert to table all records which we get from package
   118      6315        65946     10.4      0.2  				query = "INSERT INTO device_measurement(deviceid, powerconsumption, socketvoltage) VALUES(%d, %d, %d)" % (smart_id, power_consumption, current_voltage)
   119      6315      5789954    916.9     16.3  				db_operation.insert_operation(query)
   120      2105      2537871   1205.6      7.1  			db_operation.conn.commit() #this is much faster than doing commit in for loop
   121                                           		# build package which will be sending
   122                                           		# TODO what will be send in normal mode?
   123                                           		#query to check all smartboxes "ison" status
   124      2105        41723     19.8      0.1  		query_ison = "select id, ison, should_reset from device where id in %s" % (tuple(list_of_all_smartboxes_id),)
   125      2105      1734168    823.8      4.9  		result_ison = db_operation.select_operation(query_ison)
   126      2105        11780      5.6      0.0  		f_key_send = 0;
   127      2105        12061      5.7      0.0  		list_ids_change_reset = []
   128      8420        50785      6.0      0.1  		for num, ids in enumerate(list_of_all_smartboxes_id):
   129                                           			# we must cut decimal id to bytes - 451 -> to hex -> to bytes in dec
   130      6315        53342      8.4      0.2  			smart_id_hex = bytearray(pack('H', ids))
   131      6315        89323     14.1      0.3  			smart_id_dec_low = int(chr(smart_id_hex[1]).encode('hex'), 16)
   132      6315        70192     11.1      0.2  			smart_id_dec_high = int(chr(smart_id_hex[0]).encode('hex'), 16)
   133      6315        37996      6.0      0.1  			f_key_send += int(result_ison[num][1])
   134                                           			# if smartob should reset add 4 to f_key (third byte is high)
   135      6315        32007      5.1      0.1  			if result_ison[num][2]:
   136                                           				f_key_send += 4
   137                                           				list_ids_change_reset.append(ids)
   138                                           			# fill package - id low, id high, ison, pin
   139      6315        41799      6.6      0.1  			list_of_bytes_send.extend([smart_id_dec_low, smart_id_dec_high, f_key_send, smart_pins[ids]])
   140                                           		# with one element tuple is like (451,) so with this comma it isn't correct query
   141      2105        11306      5.4      0.0  		if len(list_ids_change_reset) > 1:
   142                                           			query_change_reset_status = "Update device set should_reset = 'False' where id in %s" % (tuple(list_ids_change_reset),)
   143                                           			db_operation.insert_operation(query_change_reset_status)
   144                                           			db_operation.conn.commit()
   145      2105        10498      5.0      0.0  		if len(list_ids_change_reset) == 1:
   146                                           			query_change_reset_status = "Update device set should_reset = 'False' where id = %s" % list_ids_change_reset[0]
   147                                           			db_operation.insert_operation(query_change_reset_status)
   148                                           			db_operation.conn.commit()
   149                                           		# calculatesum control
   150      2105        13804      6.6      0.0  		sum_of_bytes = sum(list_of_bytes_send)
   151      2105       127651     60.6      0.4  		sum_control = CRCCCITT().calculate(str(sum_of_bytes))
   152      2105        15888      7.5      0.0  		sum_control_array = bytearray(pack('H', sum_control))
   153                                           
   154      2105        15028      7.1      0.0  		list_of_bytes_send.extend([sum_control_array[1], sum_control_array[0]])
   155                                           
   156                                           		# print "%r" % list_of_bytes_send
   157                                           		# print "%r" % ''.join(str(bytearray(list_of_bytes_send)))
   158      2105        48924     23.2      0.1  		package_r = ':'.join(str(x) for x in list_of_bytes_send)
   159      2105        13835      6.6      0.0  		package_r += ':p'
   160      2105        50774     24.1      0.1  		print "%r" % package_r
   161      2105       656515    311.9      1.8  		request.write(package_r)
   162                                           
   163                                           		#Is this really necessary?
   164      2105        12365      5.9      0.0  		if f_key == f_key_wrong_pin:
   165                                           			print "W naszej poprzedniej rozmowie podałeś błędny PIN"
   166                                           
   167      2105        10989      5.2      0.0  		if f_key == f_key_draw_current:
   168                                           			print "Coś pobiera prąd w mniejszym lub większym stopniu prąd ale jednak"
   169                                           
   170      2105        10826      5.1      0.0  		if f_key == f_key_alarm:
   171                                           			print "Zaistniał alarm z przeciążenia/zwarcie gniazdka"
   172                                           
   173      2105        10641      5.1      0.0  		if f_key == f_key_report:
   174                                           			# \x01\xc3\x10\xff\x04\xe2\xe6\x01\xc4\x01\xff\x04\xe2\xe6\x01\xc5\x01\xff\x04\xe2\xe6\xff\xff
   175                                           			print "Ta paczka to raport na temat sieci i ostatniego połaczenia"
   176                                           
   177      2105        10496      5.0      0.0  		if f_key == f_key_ready_for_configuration:
   178                                           			# \x01\xc3\x40\xff\x04\xe2
   179                                           
   180                                           			print "Dobra jestem gotowy na przyjęcie nowej paczki z konfiguracją - dawaj ją!"
   181                                           
   182                                           			# TODO this query is hardcoded,it must be changed
   183                                           			query = "Select ip_adress, port from servers where id = 1"
   184                                           			query_result = db_operation.select_operation(query)
   185                                           			# query_result = self.database_operation(query, "select")
   186                                           			ip = query_result[0][0]
   187                                           			port = query_result[0][1]
   188                                           			ip_byte = bytearray(inet_aton(str(ip)))
   189                                           			# port is saved in two bytes, port varaible in example i equal to 8000
   190                                           			# so port port_byte is write in two bytes, for 8000 is equal to '@\x1f'
   191                                           			# port_byte[0] = 64 , port_byte[1] = 31
   192                                           			port_byte = bytearray(pack('h', port))
   193                                           			# TODO don't know how set 3rd byte
   194                                           			# for now 3rd byte will be resend
   195                                           			# TODO for now nothing change in first 3 byte so maybe mask is not necessary?
   196                                           			# TODO in bytes from 11 to 29 we send information about smartboxes working in current network,
   197                                           
   198                                           			# get first two bytes - smartbox id
   199                                           			smart_id_hex = ''.join(chr(bt) for bt in list_of_bytes[:2])
   200                                           
   201                                           			# convert id to decimal
   202                                           			smart_id = int(smart_id_hex.encode('hex'), 16)
   203                                           			query_network_id = "Select network_id from smartbox_settings where smart_id = %d" % smart_id
   204                                           			# print smart_id
   205                                           			network_id = db_operation.select_operation(query_network_id)[0][0]
   206                                           			# network_id = self.database_operation(query_network_id, "select")[0][0]
   207                                           			query = "Select smart_id, smart_password from smartbox_settings where network_id = %d" % network_id
   208                                           			all_smartboxes_ids = db_operation.select_operation(query)
   209                                           			smartboxes_count = len(all_smartboxes_ids)
   210                                           			# -1 beacuse select return also id of master smartbox
   211                                           			# 128 because its means that this package is the configuration package
   212                                           			list_of_bytes_send.extend([list_of_bytes[0], list_of_bytes[1], 128, list_of_bytes[3], ip_byte[0],
   213                                           			                           ip_byte[1], ip_byte[2], ip_byte[3], port_byte[0], port_byte[1],
   214                                           			                           smartboxes_count - 1])
   215                                           
   216      2105        12310      5.8      0.0  		if f_key == f_key_empty_memory:
   217                                           			print "Mam pustą pamięć proszę o paczkę konfiguracji"
   218                                           
   219                                           			# TODO this query is hardcoded,it must be changed
   220                                           			query = "Select ip_adress, port from servers where id = 1"
   221                                           			# query_result = self.database_operation(query, "select")
   222                                           			query_result = db_operation.select_operation(query)
   223                                           			ip = query_result[0][0]
   224                                           			port = query_result[0][1]
   225                                           			ip_byte = bytearray(inet_aton(str(ip)))
   226                                           			# port is saved in two bytes, port varaible in example i equal to 8000
   227                                           			# so port port_byte is write in two bytes, for 8000 is equal to '@\x1f'
   228                                           			# port_byte[0] = 64 , port_byte[1] = 31
   229                                           			port_byte = bytearray(pack('H', port))
   230                                           			# TODO don't know how set 3rd byte
   231                                           			# for now 3rd byte will be resend
   232                                           			# TODO for now nothing change in first 3 byte so maybe mask is not necessary?
   233                                           			# TODO in bytes from 11 to 29 we send information about smartboxes working in current network,
   234                                           			# this must be done later beacouse i dont know how to get this information
   235                                           			# 64 because its means that next package will be configuration package
   236                                           
   237                                           			list_of_bytes_send.extend([list_of_bytes[0], list_of_bytes[1], 64,
   238                                           			                           list_of_bytes[3], ip_byte[0], ip_byte[1], ip_byte[2],
   239                                           			                           ip_byte[3], port_byte[0], port_byte[1]])
   240                                           			# list_of_bytes_send is bytearray type which is represented by bytearray(b'\xff\xff')
   241                                           			# to send only bytes we must convert this array and we get only '\xff\xff'
   242                                           			self.sendResponse(bytes(list_of_bytes_send))

Total time: 1.66944 s
File: handling_post.py
Function: select_operation at line 261

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   261                                           	@profile
   262                                           	def select_operation(self, query):
   263                                           		# database connection
   264      2105        27077     12.9      1.6  		cur = self.conn.cursor()
   265      2105      1619242    769.2     97.0  		cur.execute(query)
   266      2105        19067      9.1      1.1  		rows = cur.fetchall()
   267                                           		# self.conn.close()
   268      2105         4051      1.9      0.2  		return rows

Total time: 5.61702 s
File: handling_post.py
Function: insert_operation at line 270

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   270                                           	@profile
   271                                           	def insert_operation(self, query):
   272                                           		# database connection
   273      6315       100504     15.9      1.8  		cur = self.conn.cursor()
   274      6315      5516520    873.6     98.2  		cur.execute(query)

